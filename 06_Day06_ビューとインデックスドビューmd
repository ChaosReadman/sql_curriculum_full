# Day06_ビューとIndexed View

---

## 🎯 目次
- [1. ビュー](#1-ビュー)
- [2. インデックスドビュー](#2-インデックスドビュー)
- [3. インデックスドビューやビューを作る理由](#3-インデックスドビューやビューを作る理由)
- [4. 注意点](#4-注意点)
- [✅ 振り返りチェック](#-振り返りチェック)

---

## 1. ビュー
- 仮想的なテーブル。実体はなく、SELECT文の結果を名前付きで保存したもの。
- データは保存されず、参照時に元テーブルから都度データを取得。
- 更新や集計、結合など複雑なクエリを簡単に再利用できる。

   1. 普通のビュー作り方
   ```sql
   CREATE VIEW ビュー名 AS
   SELECT カラム1, カラム2, ...
   FROM テーブル名
   WHERE 条件;
   ```
   2. 実際の例

   ```sql
   -- 実際の例
   CREATE VIEW ActiveUsers AS
   SELECT user_id, user_name
   FROM Users
   WHERE is_active = 1;
   ```

このように、`CREATE VIEW` 文でSELECT文に名前を付けるだけで、普通のビューを作成できます。

## 2. インデックスドビュー
- 「インデックス付きビュー」**とも呼ばれる。
- ビューにインデックスを作成することで、ビューの結果が物理的に保存される（一部マテリアライズドビューに近い）。
- 集計や複雑な計算結果を高速に参照できる。
- 通常のビューよりもストレージを消費し、更新時にメンテナンスコストがかかる。
- もちろん、インデックスも作成可能
```sql
-- スキーマバインド付きでビューを作成
CREATE VIEW SalesSummary
WITH SCHEMABINDING
AS
SELECT StoreID, SUM(Amount) AS TotalAmount
FROM dbo.Sales
GROUP BY StoreID;

-- ビューにユニーククラスタ化インデックスを作成
CREATE UNIQUE CLUSTERED INDEX idx_SalesSummary_StoreID
ON SalesSummary(StoreID);
```

## 3. インデックスドビューやビューを作る理由
- ビューを使う主な理由の一つは、既存のテーブル構造を変更できない場合や、新たに集計・検索用のテーブルを作るのが難しい場合に、ビューを使って高速な参照を実現したいときです。
- とりわけ、インデックスドビューは通常のビューに加えてパフォーマンスを上げたい場合にインデックス指定ができる点で有利です。
- 既存テーブルはそのまま運用したい
- 追加の集計テーブルやサマリーテーブルを作るのは運用・設計上難しい
- でもパフォーマンスを上げたい（特に集計や複雑な検索）
- このような場合、インデックスドビューを作成することで、物理的に結果を保存し、高速な検索や集計が可能になります。
- 「仮想テーブル＋物理保存」のいいとこ取りができるのがインデックスドビューの特徴です。

## 4. 注意点
- 更新系SQL（INSERT,UPDATE,DELETE）はビューやインデックスビューで使うべきではありません。
- JOINして、複数テーブルが結合されている場合は、制約が多く、一つ一つのテーブルへの更新とトランザクション制御が必要です。

---

## ✅ 振り返りチェック

- [ ] ビューとインデックスドビューの違いを説明できる
- [ ] ビューの作成方法と用途を説明できる
- [ ] インデックスドビューの作成方法と用途を説明できる
- [ ] インデックスドビューが有効な場面を説明できる
- [ ] ビューやインデックスドビューで更新系SQLを使う際の注意点を理解している

---
